{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "dc1f14b5-f0d1-4e10-9474-fd6513367a4c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values:\n",
      " title       0\n",
      "price       0\n",
      "model       0\n",
      "features    0\n",
      "dtype: int64\n",
      "\n",
      "Data types:\n",
      " title       object\n",
      "price       object\n",
      "model       object\n",
      "features    object\n",
      "dtype: object\n",
      "\n",
      "Statistical summary:\n",
      "                                                   title       price  \\\n",
      "count                                                78          78   \n",
      "unique                                               78          66   \n",
      "top     ZOTAC GAMING GeForce RTX 5060 Ti 16GB Twin Edge  ₨45,000.00   \n",
      "freq                                                  1           4   \n",
      "\n",
      "                  model                                           features  \n",
      "count                78                                                 78  \n",
      "unique                7                                                 77  \n",
      "top     Model not found  ['Graphics Coprocessor: RTX 4070 Super', 'Bran...  \n",
      "freq                 72                                                  2  \n",
      "\n",
      "Duplicate rows: 0\n",
      "\n",
      "Outliers detection:\n",
      "Data cleaned and saved to: ../data/cleaned/zestro.csv\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Step 1: Read the CSV file\n",
    "def read_data(file_path):\n",
    "    return pd.read_csv(file_path)\n",
    "\n",
    "# Step 2: Perform EDA (Exploratory Data Analysis)\n",
    "def perform_eda(df):\n",
    "    # Check for missing values\n",
    "    print(\"Missing values:\\n\", df.isnull().sum())\n",
    "\n",
    "    # Check for data types\n",
    "    print(\"\\nData types:\\n\", df.dtypes)\n",
    "\n",
    "    # Get basic statistical summary\n",
    "    print(\"\\nStatistical summary:\\n\", df.describe())\n",
    "\n",
    "    # Check for duplicates\n",
    "    print(\"\\nDuplicate rows:\", df.duplicated().sum())\n",
    "\n",
    "    # Check for outliers (for numerical columns)\n",
    "    print(\"\\nOutliers detection:\")\n",
    "    for col in df.select_dtypes(include=['float64', 'int64']).columns:\n",
    "        print(f\"{col}:\")\n",
    "        print(df[col].plot(kind='box'))\n",
    "\n",
    "# Step 3: Clean the Data\n",
    "\n",
    "def clean_data(df):\n",
    "    # Clean the 'price' column: Remove currency symbol and commas, then convert to numeric\n",
    "    df['price'] = df['price'].replace({'₨': '', ',': ''}, regex=True)\n",
    "    df['price'] = pd.to_numeric(df['price'], errors='coerce')  # Convert to numeric, NaNs for errors\n",
    "\n",
    "    # Clean 'model' column: Remove \"Model: \" and leading/trailing spaces\n",
    "    df['model'] = df['model'].apply(lambda x: x.replace(\"Model: \", \"\").strip() if isinstance(x, str) else x)\n",
    "\n",
    "    # Clean 'features' column: remove unwanted characters and strip extra spaces\n",
    "    df['features'] = df['features'].apply(lambda x: [feature.replace('\\xa0', ' ').strip() for feature in eval(x)] if isinstance(x, str) else x)\n",
    "\n",
    "    # Handle missing values (if any)\n",
    "    df['model'] = df['model'].fillna('No Model')  # Replace missing models with 'No Model'\n",
    "    df['features'] = df['features'].apply(lambda x: x if isinstance(x, list) else [])\n",
    "\n",
    "    return df\n",
    "\n",
    "\n",
    "# Step 4: Save the Cleaned Data\n",
    "def save_data(df, output_file_path):\n",
    "    df.to_csv(output_file_path, index=False)\n",
    "\n",
    "# Example usage\n",
    "input_file = '../data/scraped/zestro.csv'\n",
    "output_file = '../data/cleaned/zestro.csv'\n",
    "\n",
    "# Read data\n",
    "df = read_data(input_file)\n",
    "\n",
    "# Perform EDA\n",
    "perform_eda(df)\n",
    "\n",
    "# Clean the data\n",
    "cleaned_df = clean_data(df)\n",
    "\n",
    "# Save cleaned data\n",
    "save_data(cleaned_df, output_file)\n",
    "\n",
    "print(\"Data cleaned and saved to:\", output_file)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
